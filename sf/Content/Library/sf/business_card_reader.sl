namespace: sf
operation:
  name: business_card_reader
  inputs:
    - image_path
  python_action:
    use_jython: false
    script: "# LIBRARIES NEEDED\n# OpenCV2\nimport importlib\n\n# Numpy for math operations\n#import numpy as np\n\n# Image processing to extract text\nimport pytesseract\n\n# library written to hold regex filters\nimport filter_re\n\n# regex\nimport re\n\nnp = importlib.import_module('numpy')\ncv2 = importlib.import_module('cv2')\nspacy = importlib.import_module('spacy')\npytesseract = importlib.import_module('pytesseract')\n\n# do not remove the execute function \ndef execute(image_path): \n    \n    src_path = \"new/test_image/\"\n    results = []\n    x = driver(image_path)\n    for key, value in x:\n        phone = find_phone(value)\n        # join multiple tuples\n        #res = list(map(\" \".join, phone))\n        #res = str(res[0]).strip()\n        #res = res.replace(\" \", \"\")\n        #res = phone_format(res)\n        if key == 'DEFAULT':\n            name_default = find_name(value)\n            org_default = find_org(value)\n            email_default = find_email(value)\n            phone_default = phone\n            url_default = find_url(value)\n        if key == 'BINARY':\n            name_binary = find_name(value)\n            org_binary = find_org(value)\n            email_binary = find_email(value)\n            phone_binary =phone\n            url_binary = find_url(value)\n        if key == 'NO_NOISE':\n            name_no_noise = find_name(value)\n            org_no_noise = find_org(value)\n            email_no_noise = find_email(value)\n            phone_no_noise =phone\n            url_no_noise = find_url(value)\n        if key == 'BINARY_INV':\n            name_binary_inv = find_name(value)\n            org_binary_inv = find_org(value)\n            email_binary_inv = find_email(value)\n            phone_binary_inv =phone\n            url_binary_inv = find_url(value)\n        if key == 'TOZERO':\n            name_tozero = find_name(value)\n            org_tozero = find_org(value)\n            email_tozero = find_email(value)\n            phone_tozero =phone\n            url_tozero = find_url(value)\n        if key == 'TOZERO_INV':\n            name_tozero_inv = find_name(value)\n            org_tozero_inv = find_org(value)\n            email_tozero_inv = find_email(value)\n            phone_tozero_inv =phone\n            url_tozero_inv = find_url(value)\n        if key == 'TRUNC':\n            name_trunc = find_name(value)\n            org_trunc = find_org(value)\n            email_trunc = find_email(value)\n            phone_trunc =phone\n            url_trunc = find_url(value)\n        #results.append(name, org, url)\n    \n    \n    return locals()\n\n\n    \n#==============================================================================\n# DRIVER\n#==============================================================================\ndef driver(img_path):\n    # HOLD EXTRACTED TEXT\n    extracted_text = dict()\n    \n    # Read image with opencv\n    img = cv2.imread(img_path)\n\n    # DEFAULT\n    extracted_text['DEFAULT'] = get_string(img)\n    \n    # removen noise\n    img = remove_noise(img)\n    # GET NO-NOISE TEXT\n    extracted_text['NO_NOISE'] = get_string(img)\n    # GET ADAPTIVE THRESH TEXT\n    #extracted_text['ADAPTIVE_THRESH'] = get_string(adaptive_thresh(img))\n    \n    \n    # get various thresh\n    threshs = get_thresh(img)\n    \n    # binary\n    extracted_text['BINARY'] = get_string(threshs[0])\n    # inverse binary\n    extracted_text['BINARY_INV'] = get_string(threshs[1])\n    # trunc\n    extracted_text['TRUNC'] = get_string(threshs[2])\n    # to-zero\n    extracted_text['TOZERO'] = get_string(threshs[3])\n    # to-zero inverse\n    extracted_text['TOZERO_INV'] = get_string(threshs[4])\n    json = ''\n    # get information from each extracted text\n    for key, value in extracted_text.items():\n        print(str(key))\n        print(\"NAME: \",find_name(value))\n        print(\"ORGANIZATION: \", find_org(value))\n        print(\"E-MAIL: \", find_email(value))\n        phone = find_phone(value)\n        # join multiple tuples\n        #res = list(map(\" \".join, phone))\n        #res = str(res[0]).strip()\n        #res = res.replace(\" \", \"\")\n        #res = phone_format(res)\n        print(\"PHONE: \", phone)\n        \n        print(\"URL: \", find_url(value))\n        print(\"-----------------------------------------------------------\")\n        #json = '{\"name\":\"' + find_name(value) + '\", \"organization\":\"' + find_org(value) + '\", \"email\":\"' + find_email(value) + '\", \"phone\":\"'+ find_phone(value) + '\", \"url\":\"'+ find_url(value) +'\" }'\n    return extracted_text.items()    \n  \n#==============================================================================\n# FORMAT TO PHONE NUMBER\n#==============================================================================\ndef phone_format(n):                                                                                                                                  \n    return format(int(n[:-1]), \",\").replace(\",\", \"-\") + n[-1]      \n\n\n#==============================================================================\n# EXTRACT ORGANIZATION FROM TEXT\n#==============================================================================\ndef find_org(text):\n    # use gpu - faster\n    spacy.prefer_gpu() # comment out this line if GPU is not available\n    \n    # load English SpaCy model\n    nlp = spacy.load(\"en_core_web_sm\")\n    \n    # get encodings from text\n    doc = nlp(text)\n    \n    # return organization category\n    return [ee for ee in doc.ents if ee.label_ == 'ORG']\n\n\n\n#==============================================================================\n# EXTRACT NAME FROM THE TEXT\n#==============================================================================\ndef find_name(text):\n    # use gpu - faster\n    #spacy.prefer_gpu() # comment out this line if GPU is not available\n    \n    # load English SpaCy model\n    nlp = spacy.load(\"en_core_web_sm\") \n    \n    # get encodings from text\n    doc = nlp(text)\n    \n    # return person category\n    return [ee for ee in doc.ents if ee.label_ == 'PERSON']\n\n    # used to display\n    #displacy.serve(doc, style=\"ent\")\n    \n    \n    \n#==============================================================================\n# EXTRACT PHONE FROM THE TEXT\n#==============================================================================\ndef find_phone(text): \n    return re.findall(filter_re.PHONE_REGEX,text)\n\n\n\n#==============================================================================\n# EXTRACT EMAIL FROM THE TEXT\n#==============================================================================\ndef find_email(text): \n    return re.findall(filter_re.EMAIL_REGEX,text)\n\n\n\n#==============================================================================\n# EXTRACT URL FROM THE TEXT\n#==============================================================================\ndef find_url(text): \n    return re.findall(filter_re.WEB_URL_REGEX,text)\n\n\n\n#==============================================================================\n# GENERATE THRESH\n#==============================================================================\ndef get_thresh(img):\n    # binary\n    ret,thresh1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\n    # inverse binary\n    ret,thresh2 = cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)\n    # trunc\n    ret,thresh3 = cv2.threshold(img,127,255,cv2.THRESH_TRUNC)\n    # to-zero\n    ret,thresh4 = cv2.threshold(img,167,255,cv2.THRESH_TOZERO)\n    # to-zero inverse\n    ret,thresh5 = cv2.threshold(img,127,255,cv2.THRESH_TOZERO_INV)\n    \n    return [thresh1, thresh2, thresh3, thresh4, thresh5]\n\n\n\n#==============================================================================\n# APPLY ADAPTIVE THRESH TO THE IMAGE - BLACK AND WHITE\n#==============================================================================\ndef adaptive_thresh(img):\n    return cv2.adaptiveThreshold(img, \\\n                                 255, \\\n                                 cv2.ADAPTIVE_THRESH_GAUSSIAN_C, \\\n                                 cv2.THRESH_BINARY, \\\n                                 31, \\\n                                 2)\n    \n    \n    \n#==============================================================================\n# EXTRACT TEXT USING pytesseract\n#==============================================================================\ndef get_string(img):\n    return pytesseract.image_to_string(img)\n\n\n\n#==============================================================================\n# REMOVE NOISE\n#==============================================================================\ndef remove_noise(img):\n    # Convert to gray\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # Apply dilation and erosion to remove some noise\n    kernel = np.ones((1, 1), np.uint8)\n    img = cv2.dilate(img, kernel, iterations=1)\n    img = cv2.erode(img, kernel, iterations=1)\n    \n    return img"
  outputs:
    - results: '${results}'
    - name_default: '${name_default}'
    - url_default: '${url_default}'
    - org_default: '${org_default}'
    - phone_default: '${phone_default}'
    - email_default: '${email_default}'
    - name_binary: '${name_binary}'
    - url_binary: '${url_binary}'
    - org_binary: '${org_binary}'
    - phone_binary: '${phone_binary}'
    - email_binary: '${email_binary}'
    - name_trunc: '${name_trunc}'
    - org_trunc: '${org_trunc}'
    - org_no_noise: '${org_no_noise}'
    - org_tozero: '${org_tozero}'
    - org_tozero_inv: '${org_tozero_inv}'
    - org_binary_inv: '${org_binary_inv}'
  results:
    - SUCCESS
